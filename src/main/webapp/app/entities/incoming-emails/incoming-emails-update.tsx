import React, { useState, useEffect } from 'react';
import { Link, RouteComponentProps } from 'react-router-dom';
import { Button, Row, Col, FormText } from 'reactstrap';
import { isNumber, ValidatedField, ValidatedForm } from 'react-jhipster';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

import { convertDateTimeFromServer, convertDateTimeToServer, displayDefaultDateTime } from 'app/shared/util/date-utils';
import { mapIdList } from 'app/shared/util/entity-utils';
import { useAppDispatch, useAppSelector } from 'app/config/store';

import { IIncomingEmails } from 'app/shared/model/incoming-emails.model';
import { getEntity, updateEntity, createEntity, reset } from './incoming-emails.reducer';

export const IncomingEmailsUpdate = (props: RouteComponentProps<{ id: string }>) => {
  const dispatch = useAppDispatch();

  const [isNew] = useState(!props.match.params || !props.match.params.id);

  const incomingEmailsEntity = useAppSelector(state => state.incomingEmails.entity);
  const loading = useAppSelector(state => state.incomingEmails.loading);
  const updating = useAppSelector(state => state.incomingEmails.updating);
  const updateSuccess = useAppSelector(state => state.incomingEmails.updateSuccess);
  const handleClose = () => {
    props.history.push('/incoming-emails' + props.location.search);
  };

  useEffect(() => {
    if (isNew) {
      dispatch(reset());
    } else {
      dispatch(getEntity(props.match.params.id));
    }
  }, []);

  useEffect(() => {
    if (updateSuccess) {
      handleClose();
    }
  }, [updateSuccess]);

  const saveEntity = values => {
    const entity = {
      ...incomingEmailsEntity,
      ...values,
    };

    if (isNew) {
      dispatch(createEntity(entity));
    } else {
      dispatch(updateEntity(entity));
    }
  };

  const defaultValues = () =>
    isNew
      ? {}
      : {
          ...incomingEmailsEntity,
        };

  return (
    <div>
      <Row className="justify-content-center">
        <Col md="8">
          <h2 id="discourseReactApp.incomingEmails.home.createOrEditLabel" data-cy="IncomingEmailsCreateUpdateHeading">
            Create or edit a IncomingEmails
          </h2>
        </Col>
      </Row>
      <Row className="justify-content-center">
        <Col md="8">
          {loading ? (
            <p>Loading...</p>
          ) : (
            <ValidatedForm defaultValues={defaultValues()} onSubmit={saveEntity}>
              {!isNew ? (
                <ValidatedField name="id" required readOnly id="incoming-emails-id" label="ID" validate={{ required: true }} />
              ) : null}
              <ValidatedField label="User Id" id="incoming-emails-userId" name="userId" data-cy="userId" type="text" />
              <ValidatedField label="Topic Id" id="incoming-emails-topicId" name="topicId" data-cy="topicId" type="text" />
              <ValidatedField label="Post Id" id="incoming-emails-postId" name="postId" data-cy="postId" type="text" />
              <ValidatedField label="Raw" id="incoming-emails-raw" name="raw" data-cy="raw" type="text" />
              <ValidatedField label="Error" id="incoming-emails-error" name="error" data-cy="error" type="text" />
              <ValidatedField label="Message Id" id="incoming-emails-messageId" name="messageId" data-cy="messageId" type="text" />
              <ValidatedField label="From Address" id="incoming-emails-fromAddress" name="fromAddress" data-cy="fromAddress" type="text" />
              <ValidatedField label="To Addresses" id="incoming-emails-toAddresses" name="toAddresses" data-cy="toAddresses" type="text" />
              <ValidatedField label="Cc Addresses" id="incoming-emails-ccAddresses" name="ccAddresses" data-cy="ccAddresses" type="text" />
              <ValidatedField label="Subject" id="incoming-emails-subject" name="subject" data-cy="subject" type="text" />
              <ValidatedField
                label="Rejection Message"
                id="incoming-emails-rejectionMessage"
                name="rejectionMessage"
                data-cy="rejectionMessage"
                type="text"
              />
              <ValidatedField
                label="Is Auto Generated"
                id="incoming-emails-isAutoGenerated"
                name="isAutoGenerated"
                data-cy="isAutoGenerated"
                check
                type="checkbox"
              />
              <ValidatedField label="Is Bounce" id="incoming-emails-isBounce" name="isBounce" data-cy="isBounce" check type="checkbox" />
              <ValidatedField
                label="Imap Uid Validity"
                id="incoming-emails-imapUidValidity"
                name="imapUidValidity"
                data-cy="imapUidValidity"
                type="text"
              />
              <ValidatedField label="Imap Uid" id="incoming-emails-imapUid" name="imapUid" data-cy="imapUid" type="text" />
              <ValidatedField label="Imap Sync" id="incoming-emails-imapSync" name="imapSync" data-cy="imapSync" check type="checkbox" />
              <ValidatedField label="Imap Group Id" id="incoming-emails-imapGroupId" name="imapGroupId" data-cy="imapGroupId" type="text" />
              <ValidatedField
                label="Imap Missing"
                id="incoming-emails-imapMissing"
                name="imapMissing"
                data-cy="imapMissing"
                check
                type="checkbox"
              />
              <ValidatedField
                label="Created Via"
                id="incoming-emails-createdVia"
                name="createdVia"
                data-cy="createdVia"
                type="text"
                validate={{
                  required: { value: true, message: 'This field is required.' },
                  validate: v => isNumber(v) || 'This field should be a number.',
                }}
              />
              <Button tag={Link} id="cancel-save" data-cy="entityCreateCancelButton" to="/incoming-emails" replace color="info">
                <FontAwesomeIcon icon="arrow-left" />
                &nbsp;
                <span className="d-none d-md-inline">Back</span>
              </Button>
              &nbsp;
              <Button color="primary" id="save-entity" data-cy="entityCreateSaveButton" type="submit" disabled={updating}>
                <FontAwesomeIcon icon="save" />
                &nbsp; Save
              </Button>
            </ValidatedForm>
          )}
        </Col>
      </Row>
    </div>
  );
};

export default IncomingEmailsUpdate;
